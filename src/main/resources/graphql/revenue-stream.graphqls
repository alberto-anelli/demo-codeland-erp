input StreamAdvancementId {
    idProject: ID!
    month: Month!
}

type StreamAdvancement {
    idProject: ID!
    month: Month!
    percentage: Float
    notes: String
}

input StreamAdvancementInput {
    idProject: ID
    month: Month!
    percentage: Float
    notes: String
}

type RevenueStream {
    id: ID!
    title: String!
    description: String!
    amount: Float!
    days: Int
    notes: String
    project: Project!
    streamAdvancements: [StreamAdvancement]
}

input RevenueStreamInput {
    id: ID
    title: String!
    description: String!
    amount: Float!
    days: Int
    notes: String
    idProject: ID!
}

extend type Query {
    allRevenueStream: [RevenueStream]
    revenueStream(id: ID!): RevenueStream
    allStreamAdvancement: [StreamAdvancement]
    streamAdvancement(id: StreamAdvancementId): StreamAdvancement
}

extend type Mutation {
    createRevenueStream(revenueStream: RevenueStreamInput!): RevenueStream
    updateRevenueStream(revenueStream: RevenueStreamInput!): RevenueStream
    deleteRevenueStream(id: ID!): Boolean

    createStreamAdvancement(streamAdvancement: StreamAdvancementInput!): StreamAdvancement
    updateStreamAdvancement(streamAdvancement: StreamAdvancementInput!): StreamAdvancement
    deleteStreamAdvancement(id: ID!): Boolean
}
