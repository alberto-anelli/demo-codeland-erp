type CollaboratorEconomics {
    id: ID!
    idCollaborator: ID!
    collaborator: Collaborator!
    active: Boolean
    versionFromDate: Date!
    versionToDate: Date
    hiringDate: Date!
    level: String
    jobRole: JobRole
    leavingDate: Date
    smartWorkingDays: Int
    ralBased: Boolean!
    ral: Float
    monthAddOn: Float
    yearAddOn: Float
    ticketRestaurant: Float
    award: Float
    notes: String
}

input CollaboratorEconomicsInput {
    id: ID
    idCollaborator: ID!
    active: Boolean
    versionFromDate: Date
    versionToDate: Date
    hiringDate: Date
    level: String
    idJobRole: ID
    leavingDate: Date
    smartWorkingDays: Int
    ralBased: Boolean
    ral: Float
    monthAddOn: Float
    yearAddOn: Float
    ticketRestaurant: Float
    award: Float
    notes: String
}

extend type Query {
    getActiveVersion(idCollaborator: ID!): CollaboratorEconomics
    getVersions(idCollaborator: ID!): [CollaboratorEconomics!]!
}

extend type Mutation {
    updateCollaboratorEconomics(
        collaboratorEconomics: CollaboratorEconomicsInput!
        versionDate: Date
    ): CollaboratorEconomics
    deleteCollaboratorEconomics(id: String!): DeleteResponse

}
